---
- name: 'Install prerequisites'
  yum:
    name: "{{ yum_packages }}"
    state: latest

- name: 'Get 1c version installed'
  shell: "yum list installed 1c* | awk '{print $2}' | sed 's/-/./g' | tail -n 1 || echo 'NO NO NO'"
  register: yum_installed

- name: 'Get 1c version installed'
  debug:
    var: yum_installed

- name: 'Tunnels file'
  template:
    src: tunnel.j2
    dest: /root/tunnel.sh
    group: root
    mode: 755

- name: 'Tunnels on startup'
  file:
    src: /root/tunnel.sh
    dest: /etc/rc.d/tunnel.sh
    group: root
    mode: 755
    state: link

- name: config new zone for db-access
  firewalld:
    zone: 'pg-access'
    state: 'present'
    permanent: 'true'

- name: config PG port to zone
  firewalld:
    port: 5432/tcp
    permanent: yes
    immediate: yes
    state: enabled
    zone: 'pg-access'

- name: Allow PG port to access
  firewalld:
    source: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
    zone: 'pg-access'
  loop: "{{ net_pg_ips }}"

- name: config 1540-1541 port firewalld
  firewalld:
    port: 1540-1542/tcp
    permanent: yes
    immediate: yes
    state: enabled

- name: config 443 port firewalld
  firewalld:
    port: 443/tcp
    permanent: yes
    immediate: yes
    state: enabled

- name: config 1560-1590 port firewalld
  firewalld:
    port: 1560-1590/tcp
    permanent: yes
    immediate: yes
    state: enabled

- name: config 10050 port firewalld
  firewalld:
    port: 10050/tcp
    permanent: yes
    immediate: yes
    state: enabled
    zone: 'internal'

- name: config local networks
  firewalld:
    source: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
    zone: internal
  loop: "{{ net_local_cidrs }}"

- name: config remote ips
  firewalld:
    source: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
    zone: public
  loop: "{{ net_remote_ips }}"

- name: config gre
  firewalld:
    permanent: yes
    immediate: yes
    state: enabled
    zone: public
    service: gre
  loop: "{{ net_remote_ips }}"

- name: 'create backup dir'
  file:
    dest: '/root/dbbackups'
    state: 'directory'
    recurse: yes
    owner: root
    group: root

- name: 'init bkps cfg'
  template:
    src: pg_config.j2
    dest: /root/pg_backup.config
    group: root
    mode: 755

- name: 'init bkps script'
  template:
    src: pg_bkp.sh.j2
    dest: /root/pg_backup.sh
    group: root
    mode: 755

- name: 'init reindex script'
  template:
    src: reindex.j2
    dest: /root/pg_reindex.sh
    group: root
    mode: 755

- name: 'bkp cron job'
  cron:
    name: "a job for backup pg"
    minute: "0"
    hour: "2"
    job: "/root/pg_backup.sh"

- name: 'index cron job'
  cron:
    name: "a job for reindex pg"
    minute: "0"
    hour: "0"
    job: "/root/pg_reindex.sh"

- name: 'Vhosts file'
  template:
    src: vhost.j2
    dest: /etc/httpd/conf.d/pd.conf
    group: apache
    mode: 640


- name: 'start services'
  systemd:
    name: "{{ item  }}"
    state: started
    enabled: yes
  loop: "{{ services }}"

- name: 'add ftp user'
  user:
    name: ftpuser
    create_home: true
    shell: '/usr/sbin/nologin'


- name: 'Reinstall 1c'
  block:

  - name: stop service srv1cv83
    service:
      name: srv1cv83
      state: stopped

  - name: yum remove old installation from server
    yum:
      name: "1c-enterprise-8.3.*"
      state: removed
    when: ansible_facts['pkg_mgr'] == "yum"


  - name: yum install list of necessary for 1c packages
    yum:
      name: "{{ packages_for1c }}"
      state: latest
    when: ansible_facts['pkg_mgr'] == "yum"


  - name: yum install list of 1c packages
    yum:
      name: "{{ item }}"
      state: latest
      disable_gpg_check: yes
    with_fileglob:
    - "*.rpm"
    when: ansible_facts['pkg_mgr'] == "yum"


  - name: enable service srv1cv83
    service:
      name: srv1cv83
      enabled: yes

  - name: start service srv1cv83
    service:
      name: srv1cv83
      state: started
  when: app1cversion != yum_installed.stdout

- name: 'Create web folders'
  file:
    path: "/var/www/{{ item }}"
    state: directory
    group: apache
    mode: 640
  loop: "{{ bases }}"

- name: 'Publish bases on a web server'
  template:
    src: 'default.vrd.j2'
    dest: "/var/www/{{ item }}/default.vrd"
    group: apache
    mode: 640
  loop: "{{ bases }}"

- name: 'vsftpd conf'
  template:
    src: 'vsftpd.conf.j2'
    dest: "/etc/vsftpd/vsftpd.conf"
    mode: 640

- name: start service srv1cv83
  service:
    name: srv1cv83
    state: restarted
